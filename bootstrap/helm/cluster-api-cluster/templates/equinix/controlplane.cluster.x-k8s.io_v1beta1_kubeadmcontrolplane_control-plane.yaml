{{- if .Values.equinix.enabled }}
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlane
metadata:
  name: {{ .Values.equinix.clusterName }}-control-plane
spec:
  kubeadmConfigSpec:
    clusterConfiguration:
      apiServer:
        extraArgs:
          cloud-provider: external
      controllerManager:
        extraArgs:
          cloud-provider: external
    initConfiguration:
      nodeRegistration:
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: equinixmetal://{{ `{{ v1.instance_id }}` }}
    joinConfiguration:
      nodeRegistration:
        ignorePreflightErrors:
        - DirAvailable--etc-kubernetes-manifests
        kubeletExtraArgs:
          cloud-provider: external
          provider-id: equinixmetal://{{ `{{ v1.instance_id }}` }}
    postKubeadmCommands:
    - |
      if [ -f "/run/kubeadm/kubeadm.yaml" ]; then
        export KUBECONFIG=/etc/kubernetes/admin.conf
        export CPEM_YAML=https://github.com/equinix/cloud-provider-equinix-metal/releases/download/v3.4.0/deployment.yaml
        export SECRET_DATA='cloud-sa.json=''{"apiKey": {{ `"{{ .apiKey }}"` }},"projectID": "{{ .Values.equinix.projectId }}", "loadbalancer": "kube-vip://", "facility": "{{ .Values.equinix.facility }}"}'''
        kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}" || (sleep 1 && kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}") || (sleep 1 && kubectl create secret generic -n kube-system metal-cloud-config --from-literal="${SECRET_DATA}")
        kubectl apply -f ${CPEM_YAML} || (sleep 1 && kubectl apply -f ${CPEM_YAML}) || (sleep 1 && kubectl apply -f ${CPEM_YAML})
      fi
    preKubeadmCommands:
    - |
      sed -ri '/\sswap\s/s/^#?/#/' /etc/fstab
      swapoff -a
      mount -a
      cat <<EOF > /etc/modules-load.d/containerd.conf
      overlay
      br_netfilter
      EOF
      modprobe overlay
      modprobe br_netfilter
      cat <<EOF > /etc/sysctl.d/99-kubernetes-cri.conf
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      EOF
      sysctl --system
      apt-get -y update
      DEBIAN_FRONTEND=noninteractive apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release linux-generic jq
      curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
      echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" > /etc/apt/sources.list.d/kubernetes.list
      apt-get update -y
      TRIMMED_KUBERNETES_VERSION=$(echo {{ `{{ .kubernetesVersion }}` }} | sed 's/\./\\\\./g' | sed 's/^v//')
      RESOLVED_KUBERNETES_VERSION=$(apt-cache madison kubelet | awk -v VERSION=${TRIMMED_KUBERNETES_VERSION} '$3~ VERSION { print $3 }' | head -n1)
      DEBIAN_FRONTEND=noninteractive apt-get install -y containerd kubelet=${RESOLVED_KUBERNETES_VERSION} kubeadm=${RESOLVED_KUBERNETES_VERSION} kubectl=${RESOLVED_KUBERNETES_VERSION}
      ping -c 3 -q {{ `{{ .controlPlaneEndpoint }}` }} && echo OK || ip addr add {{` {{ .controlPlaneEndpoint }}` }} dev lo
  machineTemplate:
    infrastructureRef:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: PacketMachineTemplate
      name: {{ .Values.equinix.clusterName }}-control-plane
  replicas: {{ .Values.equinix.controlePlane.nodeCount }}
  version: {{ .Values.equinix.kubernetesVersion }}
{{- end }}
